"""
Django settings for config project.

Generated by "django-admin startproject" using Django 3.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / "subdir".
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/
# BASE_DIR = Path(__file__).resolve().parent.parent

ROOT_DIR = Path(__file__).parents[2]
APPS_DIR = ROOT_DIR / "apps"
ENVIRONMENT_DIR = "environments"
env = environ.Env()
env.read_env(env("ENV_FILE", default=str(ROOT_DIR / ENVIRONMENT_DIR / "development.env")))

# General settings

DEBUG = env.bool("DEBUG", default=False)
SECRET_KEY = env("SECRET_KEY")
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])
TIME_ZONE = "UTC"
LANGUAGE_CODE = "en-us"
SITE_ID = 1
USE_I18N = True
USE_L10N = True
USE_TZ = True
ADMIN_EMAIL = env("ADMIN_EMAIL")

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
]
THIRD_PARTY_APPS = [
    "allauth",
    "allauth.account",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "drf_yasg",
]
LOCAL_APPS = [
    "apps.users",
    "apps.userprofile",
    "apps.services",
]
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {"default": env.db("DATABASE_URL")}
DATABASES["default"]["ATOMIC_REQUESTS"] = True


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]
AUTH_USER_MODEL = "users.User"
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
ACCOUNT_ALLOW_REGISTRATION = env.bool("DJANGO_ACCOUNT_ALLOW_REGISTRATION", True)
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_ADAPTER = "apps.users.adapters.AccountAdapter"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Sendgrid

# SG_API_KEY = env("SG_API_KEY", default="")


# Twilio

# TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID", default="")
# TWILIO_AUTH_TOKEN = env("TWILIO_AUTH_TOKEN", default="")
# TWILIO_PHONE_NUMBER = env("TWILIO_PHONE_NUMBER", default="")
# TWILIO_SK_API_SID = env("TWILIO_SK_API_SID", default="")
# TWILIO_SK_API_SECRET = env("TWILIO_SK_API_SECRET", default="")
# TWILIO_PHONE_VERIFY_SERVICE_ID = env("TWILIO_PHONE_VERIFY_SERVICE_ID", default="")
# TWILIO_LOGIN_VERIFY_SERVICE_ID = env("TWILIO_LOGIN_VERIFY_SERVICE_ID", default="")
# # for non-chat participants (sms, mms, whatsapp)
# TWILIO_MSGG_SERVICE_SID = env("TWILIO_MSGG_SERVICE_SID", default="")
# TWILIO_CONVERSATIONS_SERVICE_SID = env("TWILIO_CONVERSATIONS_SERVICE_SID", default="")


# testing

TEST_TO_EMAIL = env.str("TEST_TO_EMAIL", "")
TEST_FROM_EMAIL = env.str("TEST_FROM_EMAIL", "")
TEST_PHONE_NUMBER = env.str("TEST_PHONE_NUMBER", "")
